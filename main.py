import pyttsx3      # –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
import datetime     # –†–∞–±–æ—Ç–∞ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
import speech_recognition as sr     # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ online
from vosk import Model, KaldiRecognizer     # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ offline
import wave     # –°–æ–∑–¥–∞–Ω–∏–µ –∏ —á—Ç–µ–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∞ .wav
import os       # –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
import json     # –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
import wikipediaapi     # –î–æ—Å—Ç—É–ø –∫ API –í–∏–∫–∏–ø–µ–¥–∏–∏
import webbrowser       # –û—Ç–∫—Ä—ã—Ç–∏–µ –≤–∫–ª–∞–¥–æ–∫ –±—Ä–∞—É–∑–µ—Ä–∞
import traceback        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö
from googletrans import Translator      # –î–æ—Å—Ç—É–ø –∫ API Google Translate
import subprocess       # –ó–∞–ø—É—Å–∫ –Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
import random       # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
from pathlib import Path        # –†–∞–±–æ—Ç–∞ —Å –ø—É—Ç—è–º–∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
import requests     # –û—Ç–ø—Ä–∞–≤–∫–∞ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç Web-—Å–µ—Ä–≤–µ—Ä–æ–≤
import re   # –†–∞–±–æ—Ç–∞ —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏
from textual import on  # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
from textual.app import App, ComposeResult  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
from textual.widgets import Header, Footer, Static, Log # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
import asyncio  # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
from functools import partial   # –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π

import logging  # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö
logging.basicConfig(level=logging.DEBUG)

import os   # –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
os.environ['PYGAME_HIDE_SUPPORT_PROMPT'] = 'hide'  # –°–∫—Ä—ã—Ç—å –≤—ã–≤–æ–¥ ALSA



# –ö–ª–∞—Å—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
class Bot:
   """
   –ö–ª–∞—Å—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
   """
   def __init__(self):
       """
       –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
       """
       self.bot_name_ru = "–ú–∞–∫—Å"
       self.bot_name_en = "Max"
       self.city = "–ú–æ—Å–∫–≤–∞"
       self.language = "ru"

# –ö–ª–∞—Å—Å –¥–ª—è –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏
class bot_translate:
    with open("translations.json", "r", encoding="UTF-8") as file:  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ñ–∞–π–ª—É —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
        translations = json.load(file)

# –ö–ª–∞—Å—Å –¥–ª—è –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏
class BotTranslate:
    def __init__(self, bot_instance: Bot):
        self.bot = bot_instance
        with open("translations.json", "r", encoding="UTF-8") as file:
            self.translations = json.load(file)

    def get(self, text: str):
        if text in self.translations:
            return self.translations[text][self.bot.language]
        else:
            print(f"–î–ª—è —Ñ—Ä–∞–∑—ã: {text} –Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞.")
            return text


class AssistantUI(App):
    def __init__(self, bot_instance: Bot):
        super().__init__()
        self.bot = bot_instance

    CSS_PATH = "style.tcss#v=2"
    BINDINGS = [("q", "quit", "–í—ã—Ö–æ–¥"), ("d", "toggle_dark", "–¢–µ–º–∞")]

    def compose(self) -> ComposeResult:
        yield Header(show_clock=True)
        yield Static(
            f"üåÄ [b]{self.bot.bot_name_ru}[/] ‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫",
            id="title",
            classes="box"
        )
        yield Static(
            "üìä ‚ñ∏ –°—Ç–∞—Ç—É—Å:",
            id="status-label",
            classes="box"
        )
        yield Static(
            "üü¢ –û–∂–∏–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏...",
            id="status",
            classes="box"
        )
        yield Static(
            "üìú ‚ñ∏ –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥:",
            id="history-label",
            classes="box"
        )
        yield Log(classes="logbox")
        yield Footer()

    def action_toggle_dark(self) -> None:
        self.dark = not self.dark

    def update_status(self, message: str) -> None:
        self.query_one("#status", Static).update(message)

    def add_log(self, message: str) -> None:
        self.query_one(Log).write_line(message)

    async def on_mount(self) -> None:
        self.run_worker(self.process_commands())

    async def process_commands(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞.
        –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ, –æ–∂–∏–¥–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥.
        """
        while True:  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
            try:
                # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
                query = await self.run_async(record).lower()  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø–∏—Å–∏

                # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–º–æ—â–Ω–∏–∫–∞
                activation_pattern = re.compile(
                    rf'^\s*{re.escape(self.bot.bot_name_ru.lower())}\b[\s,!;]*',
                    re.IGNORECASE
                )
                match = activation_pattern.match(query)

                # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—ë
                if not match:
                    self.add_log(f"[bold red]–ò–≥–Ω–æ—Ä:[/] {query}")
                    await asyncio.sleep(0.1)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
                    continue

                # 3. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                command = query[match.end():].strip()

                # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø—É—Å—Ç–∞—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
                if not command:
                    await speak(self.bot, "–î–∞, —Å–ª—É—à–∞—é –≤–∞—Å!")
                    self.add_log("[bold blue]–ê–∫—Ç–∏–≤–∞—Ü–∏—è:[/] –ü–æ–ª—É—á–µ–Ω–∞ –ø—É—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞")
                    continue

                # 4. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
                self.add_log(f"[bold green]–ö–æ–º–∞–Ω–¥–∞:[/] {command}")

                # 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã
                try:
                    if any(x in command for x in ["–≤–∏–∫–∏–ø–µ–¥–∏—è", "wikipedia"]):
                        self.update_status("–ü–æ–∏—Å–∫ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏...")
                        search_wiki(command)
                    elif any(x in command for x in ["–≥—É–≥–ª", "google"]):
                        self.update_status("–ü–æ–∏—Å–∫ –≤ Google...")
                        search_google(command)
                    elif any(x in command for x in ["—è–Ω–¥–µ–∫—Å", "yandex"]):
                        self.update_status("–ü–æ–∏—Å–∫ –≤ –Ø–Ω–¥–µ–∫—Å–µ...")
                        search_yandex(command)
                    elif any(x in command for x in ["—é—Ç—É–±", "youtube"]):
                        self.update_status("–ü–æ–∏—Å–∫ –Ω–∞ YouTube...")
                        search_youtube(command)
                    elif any(x in command for x in ["—Ä—É—Ç—É–±", "rutube"]):
                        self.update_status("–ü–æ–∏—Å–∫ –Ω–∞ RuTube...")
                        search_rutube(command)
                    elif any(x in command for x in ["–æ—Ç–∫—Ä–æ–π", "open"]):
                        self.update_status("–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–∞–π—Ç–∞...")
                        search_website(command)
                    elif any(x in command for x in ["–ø–µ—Ä–µ–≤–µ–¥–∏", "–ø–µ—Ä–µ–≤–æ–¥", "translate"]):
                        self.update_status("–ü–µ—Ä–µ–≤–æ–¥...")
                        translate(command)
                    elif any(x in command for x in ["–≤—Ä–µ–º—è", "time"]):
                        self.update_status("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏...")
                        time()
                    elif any(x in command for x in ["–∑–∞–ø—É—Å–∫", "–∑–∞–ø—É—Å—Ç–∏", "start"]):
                        self.update_status("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
                        start_app(command)
                    elif any(x in command for x in ["–º—É–∑—ã–∫–∞", "–º—É–∑—ã–∫—É", "music"]):
                        self.update_status("–ó–∞–ø—É—Å–∫ –º—É–∑—ã–∫–∏...")
                        play_music()

                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ" –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
                    self.update_status("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

                except Exception as e:
                    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
                    self.add_log(f"[bold red]–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:[/] {str(e)}")
                    self.update_status("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
                    traceback.print_exc()

                # 6. –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
                await asyncio.sleep(0.1)

            except asyncio.CancelledError:
                # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                self.add_log("[bold yellow]–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ–º–æ—â–Ω–∏–∫–∞...[/]")
                break

            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                self.add_log(f"[bold red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:[/] {str(e)}")
                traceback.print_exc()
                await asyncio.sleep(1)  # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ—à–∏–±–æ–∫

def record():
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
    """
    query = ""
    with microphone:
        try:
            # –†–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è —à—É–º–∞
            recognizer.adjust_for_ambient_noise(microphone, duration=1)
            
            print(f"{trex.bot_name_ru} —Å–ª—É—à–∞–µ—Ç...")
            
            # –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
            rec_audio = recognizer.listen(
                microphone, 
                timeout=8,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª–∞ —Ä–µ—á–∏
                phrase_time_limit=8  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ—Ä–∞–∑—ã
            )
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            with open("recorded_speech.wav", "wb") as file:
                file.write(rec_audio.get_wav_data())
            
            # –ü–æ–ø—ã—Ç–∫–∞ –æ–Ω–ª–∞–π–Ω-—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            query = online_recognition()
            
        except sr.WaitTimeoutError:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏—á–µ–≥–æ –Ω–µ —Å–∫–∞–∑–∞–ª
            print("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.")
            speak(trex, "–Ø –≤–∞—Å –Ω–µ —É—Å–ª—ã—à–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
            
        except sr.UnknownValueError:
            # –ï—Å–ª–∏ —Ä–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
            print("–†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.")
            speak(trex, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∞—à—É —Ä–µ—á—å.")
            
        except sr.RequestError as e:
            # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–∏—Å—É
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            speak(trex, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ñ—Ñ–ª–∞–π–Ω-—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            query = offline_recognition()
            
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ä–µ—á–∏: {e}")
            speak(trex, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ä–µ—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")

        except sr.WaitTimeoutError:
            speak(trex, translator.get("i_didnt_hear"))
            
    return query
# –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ä–µ—á–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
async def speak(my_bot, text):
    print(f"{my_bot.bot_name_ru} –≥–æ–≤–æ—Ä–∏—Ç: {text}.")
    engine.say(text)
    await asyncio.to_thread(engine.runAndWait)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
async def greetings():
    hour = datetime.datetime.now().hour
    if 0 <= hour < 6:
        await speak(trex, f"–î–æ–±—Ä–æ–π –Ω–æ—á–∏! –Ø - {trex.bot_name_ru}, –≤–∞—à –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫.")
    elif 6 <= hour < 12:
        await speak(trex, f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –Ø - {trex.bot_name_ru}, –≤–∞—à –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫.")
    elif 12 <= hour < 18:
        await speak(trex, f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –Ø - {trex.bot_name_ru}, –≤–∞—à –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫.")
    else:
        await speak(trex, f"–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –Ø - {trex.bot_name_ru}, –≤–∞—à –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫.")

# Online-—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
def online_recognition():
    query = ""
    try:
        rec_audio = sr.WavFile("recorded_speech.wav")   # –ß—Ç–µ–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ —Å —Ä–µ—á—å—é
        with rec_audio as audio:
            content = recognizer.record(audio)
        print(f"{trex.bot_name_ru} —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–µ—á—å...")
        query = recognizer.recognize_google(content, language="ru-RU").lower()
    except sr.UnknownValueError:
        pass
    except sr.RequestError:  # –ü—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ offline-—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
        print(f"{trex.bot_name_ru} –Ω–µ —Å–º–æ–≥ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ü–æ–ø—ã—Ç–∫–∞ offline-—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...")
        query = offline_recognition()
    return query

# Offline-—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
def offline_recognition():
    vosk_model = "vosk-model-ru-0.42"   # –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å Vosk
    query = ""
    try:
        if not os.path.exists(f"models/{vosk_model}"):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            print(f"–í–ù–ò–ú–ê–ù–ò–ï: –î–ª—è offline-—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —è–∑—ã–∫–æ–≤—É—é –º–æ–¥–µ–ª—å \"{vosk_model}\" —Å —Å–∞–π—Ç–∞ https://alphacephei.com/vosk/models –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞.")
            exit(1)
        audio_file = wave.open("recorded_speech.wav", "rb")
        model = Model(f"models/{vosk_model}")
        offline_recognizer = KaldiRecognizer(model, audio_file.getframerate())
        audio = audio_file.readframes(audio_file.getnframes())
        if len(audio) > 0:
            if offline_recognizer.AcceptWaveform(audio):
                query = offline_recognizer.Result()
                query = json.loads(query)
                query = query["text"]
    except:
        speak(trex, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å")
    return query

# –ü–æ–∏—Å–∫ –ø–æ –í–∏–∫–∏–ø–µ–¥–∏–∏
def search_wiki(query):
    speak(trex, "–ü—Ä–æ–∏–∑–≤–æ–∂—É –ø–æ–∏—Å–∫ –ø–æ –í–∏–∫–∏–ø–µ–¥–∏–∏")
    wiki = wikipediaapi.Wikipedia(f"{trex.bot_name_en} ({trex.bot_name_en}@selectel.ru)", "ru")
    query = query.replace("–≤–∏–∫–∏–ø–µ–¥–∏—è ", "")     # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–ª–æ–≤–∞ –∑–∞–ø—Ä–æ—Å–∞
    query = query.replace("–≤–∏–∫–∏–ø–µ–¥–∏–∏ ", "")
    query = query.replace("wikipedia ", "")
    wiki_page = wiki.page(query)
    try:
        if wiki_page.exists():
            speak(trex, f"–í–æ—Ç —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{query}\"")
            webbrowser.open(wiki_page.fullurl)  # –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Å—ã–ª–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            result = wiki_page.summary.split(".")[:2]   # –í—ã–±–æ—Ä–∫–∞ –¥–≤—É—Ö –ø–µ—Ä–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            speak(trex, result)
        else:
            speak(trex, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∏—á–µ–≥–æ –Ω–∞–π—Ç–∏ –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{query}\"")
    except:
        speak(trex, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è \"–ü–æ–∏—Å–∫ –ø–æ –í–∏–∫–∏–ø–µ–¥–∏–∏\". –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ –≤—ã–≤–µ–¥–µ–Ω—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª")
        traceback.print_exc()
        return

# –ü–æ–∏—Å–∫ –≤ Google
def search_google(query):
    speak(trex, "–ü—Ä–æ–∏–∑–≤–æ–∂—É –ø–æ–∏—Å–∫ –≤ Google")
    query = query.replace("–≥—É–≥–ª ", "")  # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Å–ª–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ
    query = query.replace("–≥—É–≥–ª–µ ", "")
    query = query.replace("google ", "")
    try:
        URI = "https://google.com/search?q=" + query
        webbrowser.open(URI)
        speak(trex, f"–í–æ—Ç —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤ Google –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{query}\"")
    except:
        speak(trex, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è \"–ü–æ–∏—Å–∫ –≤ Google\". –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ –≤—ã–≤–µ–¥–µ–Ω—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª")
        traceback.print_exc()
        return

# –ü–æ–∏—Å–∫ –≤ –Ø–Ω–¥–µ–∫—Å–µ
def search_yandex(query):
    speak(trex, "–ü—Ä–æ–∏–∑–≤–æ–∂—É –ø–æ–∏—Å–∫ –≤ –Ø–Ω–¥–µ–∫—Å–µ")
    query = query.replace("—è–Ω–¥–µ–∫—Å ", "")    # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Å–ª–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ
    query = query.replace("yandex ", "")
    try:
        URI = "https://ya.ru/search?text=" + query
        webbrowser.open(URI)
        speak(trex, f"–í–æ—Ç —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤ –Ø–Ω–¥–µ–∫—Å–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{query}\"")
    except:
        speak(trex, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è \"–ü–æ–∏—Å–∫ –≤ –Ø–Ω–¥–µ–∫—Å–µ\". –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ –≤—ã–≤–µ–¥–µ–Ω—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª")
        traceback.print_exc()
        return

# –ü–æ–∏—Å–∫ –ø–æ YouTube
def search_youtube(query):
    speak(trex, "–ü—Ä–æ–∏–∑–≤–æ–∂—É –ø–æ–∏—Å–∫ –Ω–∞ YouTube")
    query = query.replace("—é—Ç—É–± ", "")  # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Å–ª–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ
    query = query.replace("youtube ", "")
    try:
        URI = "https://www.youtube.com/results?search_query=" + query
        webbrowser.open(URI)
        speak(trex, f"–í–æ—Ç —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∞ YouTube –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{query}\"")
    except:
        speak(trex, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è \"–ü–æ–∏—Å–∫ –Ω–∞ YouTube\". –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ –≤—ã–≤–µ–¥–µ–Ω—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª")
        traceback.print_exc()
        return

# –ü–æ–∏—Å–∫ –ø–æ RuTube
def search_rutube(query):
    speak(trex, "–ü—Ä–æ–∏–∑–≤–æ–∂—É –ø–æ–∏—Å–∫ –Ω–∞ RuTube")
    query = query.replace("—Ä—É—Ç—É–± ", "") # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Å–ª–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ
    query = query.replace("rutube ", "")
    try:
        URI = "https://rutube.ru/search/?query=" + query
        webbrowser.open(URI)
        speak(trex, f"–í–æ—Ç —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∞ RuTube –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{query}\"")
    except:
        speak(trex, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è \"–ü–æ–∏—Å–∫ –Ω–∞ RuTube\". –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ –≤—ã–≤–µ–¥–µ–Ω—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª")
        traceback.print_exc()
        return

# –û—Ç–∫—Ä—ã—Ç–∏–µ –≤–µ–±-—Å–∞–π—Ç–∞
def search_website(query):
    query = query.replace("–æ—Ç–∫—Ä–æ–π ", "")    # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Å–ª–æ–≤
    query = query.replace("open ", "")
    speak(trex, f"–ü—Ä–æ–∏–∑–≤–æ–∂—É –ø–æ–∏—Å–∫ —Å–∞–π—Ç–∞ \"{query}\"")
    try:
        URI = "https://www." + query
        webbrowser.open(URI)
        speak(trex, f"–û—Ç–∫—Ä—ã–≤–∞—é \"{query}\"")
    except:
        speak(trex, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è \"–û—Ç–∫—Ä—ã—Ç—å website\". –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ –≤—ã–≤–µ–¥–µ–Ω—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª")
        traceback.print_exc()
        return

# –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫
from googletrans import Translator
from deep_translator import GoogleTranslator


def translate(query):
    if "—Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ" in query:
        lang_src = "en"
        lang_dest = "ru"
    elif "–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π" in query:
        lang_src = "ru"
        lang_dest = "en"
    else:
        speak(trex, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç")
        return

    query = query.replace("–ø–µ—Ä–µ–≤–µ–¥–∏ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ ", "").replace("–ø–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π ", "")

    try:
        translator = GoogleTranslator(source=lang_src, target=lang_dest)
        translated_text = translator.translate(query)
        speak(trex, translated_text)
    except Exception as e:
        speak(trex, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è \"–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫\". –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ –≤—ã–≤–µ–¥–µ–Ω—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª")
        traceback.print_exc()

# –í—Ä–µ–º—è
def time():
    time_time = datetime.datetime.now().strftime("%H:%M:%S")
    speak(trex, f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {time_time}")

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def start_app(query):
    query = query.replace("–∑–∞–ø—É—Å—Ç–∏ ", "")
    print(query)
    if ("edge" in query):
        subprocess.run("C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe")
    elif ("–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä" in query):
        subprocess.run(["start calc"])
    elif ("–±—Ä–∞—É–∑–µ—Ä" in query):
        subprocess.run(["start chrome"])

# –ó–∞–ø—É—Å–∫ –º—É–∑—ã–∫–∏
def play_music():
    music_dir_name = "C:\\MyMusic"
    music_dir = Path(music_dir_name)
    music = os.listdir(music_dir)
    print(f"–í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ \"{music_dir}\" –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏: \n", music)
    music_count = len(list(music_dir.iterdir()))
    print(f"–í –ø–∞–ø–∫–µ {music_dir} –µ—Å—Ç—å {music_count} –æ–±—ä–µ–∫—Ç–æ–≤")
    os.startfile(os.path.join(music_dir, music[random.randint(0, music_count-1)]))


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    trex = Bot()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –î–û –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    engine = pyttsx3.init()
    voices = engine.getProperty('voices')
    engine.setProperty('voice', voices[0].id if trex.language == "ru" else voices[1].id)
    
    recognizer = sr.Recognizer()
    microphone = sr.Microphone()
    translator = BotTranslate(bot_instance=trex)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = AssistantUI(bot_instance=trex)
    
    async def main():
        await app.run_async()

    asyncio.run(main())